#!/bin/bash

#######################################################################################################################
# Parameters

BRANCH="2.4.0"
INTERFACE_REPOSITORY="splashscreen_interface"
ARCHITECH_MANIFESTS_REPOSITORY="architech-manifest"
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $DIR/../../
ROOT_DIRECTORY=`pwd`
ARCHITECH_MANIFEST="${ROOT_DIRECTORY}/${ARCHITECH_MANIFESTS_REPOSITORY}/architech"
PARTNERS_MANIFEST="${ROOT_DIRECTORY}/${ARCHITECH_MANIFESTS_REPOSITORY}/partners"
ARCHITECH_DIRECTORY="architech"
PARTNERS_DIRECTORY="partners"
BOARDS_MANIFEST="boards_manifest"
BOARDS_MANIFEST_DIRECTORY="boards_manifest"
SPLASHSCREEN_DIRECTORY="splashscreen"
UPDATE_GRAPHICS="no"
UPDATE_BOARDS="no"

#######################################################################################################################
# Helpers

function print_usage {
cat << EOF

 This program prepares gets graphics and boards information from
 git repositories and runs boards installations script

 Usage: $1 [options]

 OPTIONS:
 -h                 Print this help and exit
 -g                 Update ArchiTech splashscreen graphics
 -b                 Update boards information. You have to know what your doing here.

EOF
}

function internet_error {
    echo "ERROR: Impossible to connect to Internet, double check your Internet connection"
    exit 1   
}

function board_installation_error {
    echo "ERROR: Impossible to install/update $1 board"
}

#######################################################################################################################
# Options parsing

while getopts "hgb" option
do
    case ${option} in
        h)
            print_usage $0
            exit 0
            ;;
        g)
            UPDATE_GRAPHICS="yes"
            ;;
        b)
            UPDATE_BOARDS="yes"
            ;;
        ?)
            print_usage $0
            exit 1
            ;;
    esac
done

#######################################################################################################################
# ArchiTech manifest files. We always want to update the manifest.

cd ${ROOT_DIRECTORY}
if [ ! -d ${ARCHITECH_MANIFESTS_REPOSITORY} ]
then
    echo "Cloning architech-manifest repository..."
    git clone -b ${BRANCH} https://github.com/architech-boards/architech-manifest.git > /dev/null 2>&1
    [ $? -eq 0 ] || internet_error
else
    cd ${ARCHITECH_MANIFESTS_REPOSITORY}
    echo "Updating ${ARCHITECH_MANIFESTS_REPOSITORY} repository..."
    git pull > /dev/null 2>&1
    [ $? -eq 0 ] || internet_error
fi

#######################################################################################################################
# Splashscreen interface. We update only if required.

cd ${ROOT_DIRECTORY}
if [ ! -d ${INTERFACE_REPOSITORY} ]
then
    echo "Cloning ${INTERFACE_REPOSITORY} repository..."
    git clone -b ${BRANCH} https://github.com/architech-boards/${INTERFACE_REPOSITORY}.git > /dev/null 2>&1
    [ $? -eq 0 ] || internet_error
elif [ "${UPDATE_GRAPHICS}" == "yes" ]
then
    cd ${INTERFACE_REPOSITORY}
    echo "Updating ${INTERFACE_REPOSITORY} repository..."
    git pull > /dev/null 2>&1
    [ $? -eq 0 ] || internet_error
fi

#######################################################################################################################
# ArchiTech boards manifest parsing. We update only if required

# Each row of the manifest contains three fields (separated by |), which are:
# 1) board alias      - the internal identifier for the board
# 2) board repository - the repository where to get the board information
# 3) board branch     - the branch to clone

while read ARCHITECH_BOARD
do
    BOARD_ALIAS=`echo ${ARCHITECH_BOARD} | awk -F"|" '{print $1}'`
    BOARD_REPOSITORY=`echo ${ARCHITECH_BOARD} | awk -F"|" '{print $2}'`
    BOARD_BRANCH=`echo ${ARCHITECH_BOARD} | awk -F"|" '{print $3}'`
    mkdir -p ${ROOT_DIRECTORY}/${ARCHITECH_DIRECTORY}/${BOARD_ALIAS}
    cd ${ROOT_DIRECTORY}/${ARCHITECH_DIRECTORY}/${BOARD_ALIAS}
    if [ ! -e "${SPLASHSCREEN_DIRECTORY}" ]
    then
        echo "Cloning ${BOARD_REPOSITORY} repository..."
        git clone -b ${BOARD_BRANCH} ${BOARD_REPOSITORY} ${SPLASHSCREEN_DIRECTORY} > /dev/null 2>&1
        [ $? -eq 0 ] || internet_error
        cd ${SPLASHSCREEN_DIRECTORY}
        echo "Installing ${BOARD_ALIAS}..."
        ./run_install
        case $? in
            0)
                echo "${BOARD_ALIAS} installation done."
                ;;
            1)
                internet_error
                ;;
            *)
                board_installation_error ${BOARD_ALIAS}
                ;;
        esac
    elif [ "${UPDATE_BOARDS}" == "yes" ]
    then
        echo "Updating ${BOARD_ALIAS}..."
        cd ${SPLASHSCREEN_DIRECTORY}
        git pull > /dev/null 2>&1
        [ $? -eq 0 ] || internet_error
        ./run_install
         case $? in
            0)
                echo "${BOARD_ALIAS} update done."
                ;;
            1)
                internet_error
                ;;
            *)
                board_installation_error ${BOARD_ALIAS}
                ;;
        esac       
    fi
done < "${ARCHITECH_MANIFEST}"

#######################################################################################################################
# ArchiTech partners manifest parsing and partners repository parsing. We always update manifests but we update the
# graphics only if required

# Each row of the manifest contains three fields (separated by |), which are:
# 1) partner alias                      - the internal identifier for the partner
# 2) partner repository                 - the repository where to get the partner information
# 3) partner branch                     - the branch to clone
# 4) partner boards manifest repository - the repository where to get the partner boards manifest
# 5) partner boards manifest branche    - the branch to clone
# 
# The partner boards manifest repository contains information regarding the partner boards just like ArchiTech boards
# manifest does.

# FIXME - group board installation/update code

while read ARCHITECH_PARTNER
do
    PARTNER_ALIAS=`echo ${ARCHITECH_PARTNER} | awk -F"|" '{print $1}'`
    PARTNER_REPOSITORY=`echo ${ARCHITECH_PARTNER} | awk -F"|" '{print $2}'`
    PARTNER_BRANCH=`echo ${ARCHITECH_PARTNER} | awk -F"|" '{print $3}'`
    PARTNER_BOARDS_MANIFEST_REPOSITORY=`echo ${ARCHITECH_PARTNER} | awk -F"|" '{print $4}'`
    PARTNER_BOARDS_MANIFEST_BRANCH=`echo ${ARCHITECH_PARTNER} | awk -F"|" '{print $5}'`
    mkdir -p ${ROOT_DIRECTORY}/${PARTNERS_DIRECTORY}/${PARTNER_ALIAS}

    cd ${ROOT_DIRECTORY}/${PARTNERS_DIRECTORY}/${PARTNER_ALIAS}
    if [ ! -e ${SPLASHSCREEN_DIRECTORY} ]
    then
        echo "Cloning ${PARTNER_REPOSITORY}..."
        git clone -b ${PARTNER_BRANCH} ${PARTNER_REPOSITORY} ${SPLASHSCREEN_DIRECTORY} > /dev/null 2>&1
        [ $? -eq 0 ] || internet_error
    elif [ "${UPDATE_GRAPHICS}" == "yes" ]
    then
        echo "Updating ${PARTNER_REPOSITORY}..."
        cd ${SPLASHSCREEN_DIRECTORY}
        git pull > /dev/null 2>&1
        [ $? -eq 0 ] || internet_error
    fi

    cd ${ROOT_DIRECTORY}/${PARTNERS_DIRECTORY}/${PARTNER_ALIAS}
    if [ ! -e ${BOARDS_MANIFEST_DIRECTORY} ]
    then
        echo "Cloning ${PARTNER_BOARDS_MANIFEST_REPOSITORY}..."
        git clone -b ${PARTNER_BOARDS_MANIFEST_BRANCH} ${PARTNER_BOARDS_MANIFEST_REPOSITORY} ${BOARDS_MANIFEST_DIRECTORY} > /dev/null 2>&1
        [ $? -eq 0 ] || internet_error
    else
        echo "Updating ${PARTNER_BOARDS_MANIFEST_REPOSITORY}..."
        cd ${BOARDS_MANIFEST_DIRECTORY}
        git pull > /dev/null 2>&1
        [ $? -eq 0 ] || internet_error
    fi

    PARTNER_BOARDS_MANIFEST="${ROOT_DIRECTORY}/${PARTNERS_DIRECTORY}/${PARTNER_ALIAS}/${BOARDS_MANIFEST_DIRECTORY}/${BOARDS_MANIFEST}"

    while read PARTNER_BOARD
    do
        BOARD_ALIAS=`echo ${PARTNER_BOARD} | awk -F"|" '{print $1}'`
        BOARD_REPOSITORY=`echo ${PARTNER_BOARD} | awk -F"|" '{print $2}'`
        BOARD_BRANCH=`echo ${PARTNER_BOARD} | awk -F"|" '{print $3}'`
        mkdir -p ${ROOT_DIRECTORY}/${PARTNERS_DIRECTORY}/${PARTNER_ALIAS}/${BOARD_ALIAS}
        cd ${ROOT_DIRECTORY}/${PARTNERS_DIRECTORY}/${PARTNER_ALIAS}/${BOARD_ALIAS}
        if [ ! -e "${SPLASHSCREEN_DIRECTORY}" ]
        then
            echo "Cloning ${BOARD_REPOSITORY}..."
            git clone -b ${BOARD_BRANCH} ${BOARD_REPOSITORY} ${SPLASHSCREEN_DIRECTORY} > /dev/null 2>&1
            [ $? -eq 0 ] || internet_error
            cd ${SPLASHSCREEN_DIRECTORY}
            echo "Installing ${BOARD_ALIAS}..."
            ./run_install
            [ $? -eq 0 ] || board_installation_error $BOARD_ALIAS
        elif [ "${UPDATE_BOARDS}" == "yes" ]
        then
            echo "Updating ${BOARD_REPOSITORY}..."
            cd ${SPLASHSCREEN_DIRECTORY}
            git pull > /dev/null 2>&1
            [ $? -eq 0 ] || internet_error
            echo "Updating ${BOARD_ALIAS}..."
            ./run_install
            [ $? -eq 0 ] || board_installation_error $BOARD_ALIAS           
        fi
    done < "${PARTNER_BOARDS_MANIFEST}"

done < "${PARTNERS_MANIFEST}"

exit 0
